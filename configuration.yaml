# Testing once again: testing github pull permissions
# Configure a default setup of Home Assistant (frontend, api, etc)
default_config:

frontend:
  themes: !include_dir_merge_named themes

# Uncomment this if you are using SSL/TLS, running in Docker container, etc.
http:
  # For extra security set this to only accept connections on localhost if NGINX is on the same machine
  # Uncommenting this will mean that you can only reach Home Assistant using the proxy, not directly via IP from other clients.
  # server_host: 127.0.0.1
  use_x_forwarded_for: true
  # You must set the trusted proxy IP address so that Home Assistant will properly accept connections
  # Set this to your NGINX machine IP, or localhost if hosted on the same machine.
  trusted_proxies: !secret SWAG_PROXY_IP

# Text to speech
tts:
  - platform: google_translate
    base_url: !secret TTS_BASE_URL

# Use custom dyson component
# better_dyson:
#   username: !secret DYSON_USERNAME
#   password: !secret DYSON_PASSWORD
#   language: !secret DYSON_COUNTRY
#   devices:
#     - device_id: !secret DYSON_DEVICE_ID
#       device_ip: !secret DYSON_DEVICE_IP

nest:
  client_id: !secret NEST_SDM_CLIENT_ID
  client_secret: !secret NEST_SDM_CLIENT_SECRET
  project_id: !secret NEST_SDM_PROJECT_ID
  subscriber_id: !secret NEST_SDM_SUBSCRIBER_ID

# Notification groups
notify:
  - name: iphones
    platform: group
    services:
      - service: mobile_app_nils_iphone_xs
      - service: mobile_app_steves_iphone_12

# Google Assistant relay commands
rest_command:
  assistant_broadcast:
    url: http://localhost:3000/assistant
    method: POST
    content_type: 'application/json'
    payload: '{"command":"{{ command }}"{% if username -%}, "user":"{{ username }}"{%- endif %}, "broadcast":true}'
    
  assistant_converse:
    url: http://localhost:3000/assistant
    method: POST
    content_type: 'application/json'
    payload: '{"command":"{{ command }}"{% if username -%}, "user":"{{ username }}"{%- endif %}, "converse":true}'

  assistant_relay:
    url: http://localhost:3000/assistant
    method: POST
    content_type: 'application/json'
    payload: '{"command":"{{ command }}"{% if username -%}, "user":"{{ username }}"{%- endif %}}'

shell_command:
  restart_homebridge: docker restart homebridge

switch:
  - platform: broadlink
    mac: "a0:43:b0:5e:92:ee"
    switches:
      - name: Bedroom Aircon Power
        command_on: "JgBQAAABJpQRFBISExMSExETExMRFBE4EjgTOBI3EjgTNxI4EjcTExITERMTOBI3EjgTEhIUETgTNxM3EhMSExITEzcROBMTEgAFIAABKEoSAA0F"
        command_off: "JgBQAAABJZUSFBAUEhQQFBETExMSFBA5ETgTOBE4EjgTNxI4EjgSFBETEhMSOBE4EjgTExEUEjcRORI4EhMSFBAVEDkROBMTEgAFIAABJ0sRAA0F"

climate:
  - platform: generic_thermostat
    name: Bedroom Aircon
    heater: switch.bedroom_aircon_power
    target_sensor: sensor.pure_hot_cool_link_temperature
    ac_mode: true
    target_temp: 22
    min_temp: 16
    max_temp: 30
    initial_hvac_mode: "off"
    precision: 1.0

homekit:
  filter:
    include_domains:
      - light
      - alarm_control_panel
    include_entities:
      - person.nil
      - person.steve
      - input_boolean.in_a_meeting_nil
      - climate.bedroom_aircon
    exclude_entities:
      - light.living_room_sofa
      - light.bedroom_bed
      - light.small
      - light.living_room_table
      - light.christmas_balcony
      - light.christmas_tree
      - light.office
      - media_player.philipstv
      - light.on_off_plug_1
      - light.configuration_tool_2
      - light.mi_desk_lamp
  entity_config:
    alarm_control_panel.home_alarm:
      code: !secret ALARM_CODE

google_assistant:
  project_id: !secret GOOGLE_ASSISTANT_PROJECT_ID
  service_account: !include google-assistant/service_account.json
  report_state: true
  secure_devices_pin: !secret ALARM_CODE
  exposed_domains:
    - fan
    - sensor
    - alarm_control_panel
    - camera
    - vacuum
    - binary_sensor
  entity_config:
    vacuum.molly:
      aliases:
        - Mali
        - Rocky
        - robot

# Sensor to detect if anyone is at home
person:
binary_sensor:
- platform: template
  sensors:
    someone_home:
      friendly_name: Someone Home
      icon_template: >-
        {% if is_state('binary_sensor.someone_home','on') %}
          mdi:home-account
        {% else %}
          mdi:home-outline
        {% endif %}
      value_template: "{{ is_state('person.nil','home') or  is_state('person.steve','home') }}"

discovery:
  ignore:
    - philips_hue
    - xiaomi_gw
#hue:
#  bridges:
#    - host: !secret HUE_BRIDGE_IP
#      allow_hue_groups: false

media_player:
  - platform: philips_android_tv
    name: PhilipsTV
    host: !secret PHILIPS_TV_HOST
    mac: !secret PHILIPS_TV_MAC
    username: !secret PHILIPS_TV_USERNAME
    password: !secret PHILIPS_TV_PASSWORD
    hide_channels: true

homeassistant:
  name: Home
  customize: !include customize.yaml

alarm_control_panel:
  - platform: manual
    name: Home Alarm
    code: !secret ALARM_CODE
    code_arm_required: false
    arming_time: 0
    delay_time: 20
    trigger_time: 60
    disarmed:
      trigger_time: 0
    armed_home:
      arming_time: 0
      delay_time: 0
    armed_away:
      arming_time: 10
      delay_time: 10

timer:
  entrance:
    duration: '00:00:30'
  dishwasher:
    duration: '01:14:00'

# Dishwasher timer entities
input_select:
  dishwasher_programs:
    name: "Dishwasher program"
    options:
      - P3
      - P4 (eco)
    icon: mdi:dishwasher

template:
  - sensor:
      name: "Current DW program duration"
      state: >
          {% set mapper =
            { 'P3': '01:14:00',
              'P4 (eco)': '01:56:00' } %}
          {% set state = states('input_select.dishwasher_programs') %}
          {% set duration = mapper[state] if state in mapper %}
          {{ duration }}
      unique_id: dishwasher_current_program_duration

sensor:
  - platform: edata
    debug: true

logger:
  default: warn

group: !include groups.yaml
automation: !include_dir_merge_list automations
script: !include scripts.yaml
